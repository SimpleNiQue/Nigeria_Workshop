input_path <- paste0(drive_path, "Spatial Data/")
#Load needed dataset
health_facilities <- st_read(paste0(input_path, "GRID3_Nigeria_-_Health_Care_Facilities_.shp"))
View(health_facilities)
#Load needed dataset
health_facilities <- st_read(paste0(input_path, "GRID3_Nigeria_-_Health_Care_Facilities.shp"))
library(sf)
library(raster)
library(tmap)
library(leaflet)
library(units)
library(exactextractr)
library(tidyverse)
tmap_mode('view')
tmap_options(check.and.fix = TRUE)
#Specify Drive Path
drive_path <- "C:/Users/oy1r22/Documents/WorldPop Project/Nigeria Workshop/"
input_path <- paste0(drive_path, "Spatial Data/")
#Load needed dataset
health_facilities <- st_read(paste0(input_path, "GRID3_Nigeria_-_Health_Care_Facilities.shp"))
states <- st_read(paste0(input_path, "Admin2_states.shp"))
country <- st_read(paste0(input_path, "nga_polbnda_adm0_1m.shp"))
# Basic visualizations -------------------------------------------------
#Mapping the states
states %>%
st_drop_geometry() %>%
View()
#We can create an interactive map of the states shapefile using leaflet or tmap
leaflet(states) %>%
addPolygons() %>%
addTiles()
#using tmap
tm_shape(states)+
tm_borders(col='orange', lwd=5)+
tm_shape(states)+
tm_borders()+
tm_basemap('OpenStreetMap')
#mapping health facilities
health_facilities %>%
st_drop_geometry() %>%
View()
View(health_facilities)
tm_shape(health_facilities)+
tm_dots(col='category', size=0.07)+
tm_basemap('OpenStreetMap')+
tm_shape(states)+
tm_borders(lwd=1)
#We will focus on Niger States for the health care analysis
#Subset Niger States from the Analysis
Niger_States <- states %>%
filter(statename == "Niger")
health_facilities_Niger <- health_facilities %>%
filter(statename=='Niger')
# EXERCISE: How many health facilities in Niger?
tally(health_facilities_Niger)
#mapping health facilities
health_facilities <- health_facilities %>%
st_drop_geometry() %>%
drop_na(category)
#mapping health facilities
health_facilities <- health_facilities %>%
st_drop_geometry() %>%
drop_na(category) %>%
View()
tm_shape(health_facilities)+
tm_dots(col='category', size=0.07)+
tm_basemap('OpenStreetMap')+
tm_shape(states)+
tm_borders(lwd=1)
#Load needed dataset
health_facilities <- st_read(paste0(input_path, "GRID3_Nigeria_-_Health_Care_Facilities.shp"))
states <- st_read(paste0(input_path, "Admin2_states.shp"))
# Basic visualizations -------------------------------------------------
#Mapping the states
states %>%
st_drop_geometry() %>%
View()
#We can create an interactive map of the states shapefile using leaflet or tmap
leaflet(states) %>%
addPolygons() %>%
addTiles()
#using tmap
tm_shape(states)+
tm_borders(col='orange', lwd=5)+
tm_shape(states)+
tm_borders()+
tm_basemap('OpenStreetMap')
#mapping health facilities
health_facilities <- health_facilities %>%
st_drop_geometry() %>%
drop_na(category) %>%
View()
tm_shape(health_facilities)+
tm_dots(col='category', size=0.07)+
tm_basemap('OpenStreetMap')+
tm_shape(states)+
tm_borders(lwd=1)
class(health_facilities)
#mapping health facilities
health_facilities %>%
st_drop_geometry() %>%
View()
#Load needed dataset
health_facilities <- st_read(paste0(input_path, "GRID3_Nigeria_-_Health_Care_Facilities.shp"))
#mapping health facilities
health_facilities %>%
st_drop_geometry() %>%
View()
tm_shape(health_facilities)+
tm_dots(col='category', size=0.07)+
tm_basemap('OpenStreetMap')+
tm_shape(states)+
tm_borders(lwd=1)
#We will focus on Niger States for the health care analysis
#Subset Niger States from the Analysis
Niger_States <- states %>%
filter(statename == "Niger")
health_facilities_Niger <- health_facilities %>%
filter(statename=='Niger')
# EXERCISE: How many health facilities in Niger?
tally(health_facilities_Niger)
health_facilities_Niger %>%
group_by(type) %>%
summarise(count= n()) %>%
ggplot(aes(x = type, y = count)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.5, size = 4) +
xlab("Type of Health Facility") +
ylab("Number") +
ggtitle("Number of Health Facilities in Niger States")+
scale_fill_brewer(type = "qual", palette = "Greens")
#Plot hospitals
tm_shape(health_facilities_Niger)+
tm_dots(col='amenity', size=0.07, id='primary_na', popup.vars=c('category','functional','source')))+
#Plot hospitals
tm_shape(health_facilities_Niger)+
tm_dots(col='amenity', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(Niger_States)+
tm_borders(lwd=1)
#Plot hospitals
tm_shape(health_facilities_Niger)+
tm_dots(col='type', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(Niger_States)+
tm_borders(lwd=1)
table(health_facilities_Niger$type)
pop <- raster(paste0(input_path, "NGA_population_v1_2_gridded.tif"))
pop_Niger <- crop(pop, Niger_States)
plot(pop_Niger)
tm_shape(health_facilities_Niger)+
tm_dots(col='type', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(pop_Niger)+
tm_raster()+
tm_shape(Niger_States)+
tm_borders(lwd=4)
View(health_facilities)
health_facilities_Niger_buffered <- st_buffer(health_facilities_Niger, dist=set_units(2, km))
tm_shape(pop_Niger)+
tm_raster()+
tm_shape(health_facilities_Niger_buffered)+
tm_borders()+
tm_shape(health_facilities_Niger)+
tm_dots( size=0.08, id='primary_na')+
tm_basemap('OpenStreetMap')
health_facilities_Niger_pop <- raster::extract(pop_Niger, health_facilities_Niger_buffered, fun=sum, na.rm=T,df=T)
#Rename extracted population
health_facilities_Niger_pop <- health_facilities_Niger_pop %>%
rename(pop = NGA_population_v1_2_gridded)
#cbind extracted population to health facilities
health_facilities_Niger_buffered <- health_facilities_Niger_buffered %>%
bind_cols(health_facilities_Niger_pop)
#EXERCISE: How many people are living in 2km radius of a Health Center in Niger States?
sum(health_facilities_Niger_buffered$pop)
#Some summary statistics
summary(health_facilities_Niger_buffered$pop)
hist(health_facilities_Niger_buffered$pop, breaks=20)
#Plotting the population size and health facilities
tm_shape(health_facilities_Niger_buffered)+
tm_fill('pop', style='pretty', id='primary.na')+
tm_shape(health_facilities_Niger)+
tm_dots( size=0.08, id='primary.na')+
tm_basemap('OpenStreetMap')
#We want see the health facilities where their catchment area has a population of less than 1000 people
tm_shape(health_facilities_Niger_buffered %>%
filter(pop<1000))+
tm_fill( id='pop', alpha=0.5, col='grey20')+
tm_shape(pop_Niger)+
tm_raster()+
tm_basemap('OpenStreetMap')
Niger_pop_df <- exact_extract(x = pop, y = Niger_States, fun = 'sum')
#Rename
Niger_pop_df <- data.frame(Niger_pop_df) %>%
rename(total_pop = Niger_pop_df)
sum(Niger_pop_df$total_pop) - sum(health_facilities_Niger_pop$pop)
View(Niger_pop_df)
sum(health_facilities_Niger_pop$pop)
sum(Niger_pop_df$total_pop)
health_facilities_Niger_buffered <- st_buffer(health_facilities_Niger, dist=set_units(1, km))
sum(health_facilities_Niger_buffered$pop)
health_facilities_Niger_pop <- raster::extract(pop_Niger, health_facilities_Niger_buffered, fun=sum, na.rm=T,df=T)
#Rename extracted population
health_facilities_Niger_pop <- health_facilities_Niger_pop %>%
rename(pop = NGA_population_v1_2_gridded)
#cbind extracted population to health facilities
health_facilities_Niger_buffered <- health_facilities_Niger_buffered %>%
bind_cols(health_facilities_Niger_pop)
#EXERCISE: How many people are living in 2km radius of a Health Center in Niger States?
sum(health_facilities_Niger_buffered$pop)
#Load needed dataset
health_facilities <- st_read(paste0(input_path, "GRID3_Nigeria_-_Health_Care_Facilities.shp"))
lga <- st_read(paste0(input_path,"GRID3_Nigeria_-_Local_Government_Area_Boundaries.shp"))
states <- st_read(paste0(input_path, "Admin2_states.shp"))
View(lga)
# Basic visualizations -------------------------------------------------
#Mapping the states
states %>%
st_drop_geometry() %>%
View()
#We can create an interactive map of the states shapefile using leaflet or tmap
leaflet(states) %>%
addPolygons() %>%
addTiles()
#using tmap
tm_shape(states)+
tm_borders(col='orange', lwd=5)+
tm_shape(states)+
tm_borders()+
tm_basemap('OpenStreetMap')
tm_shape(lga)+
tm_borders(col='orange', lwd=5)+
tm_shape(lga)+
tm_borders()+
tm_basemap('OpenStreetMap')
v<- health_facilities %>%
filter(lga_name == "Municipal Area Council")
View(v)
#We will focus on Niger States for the health care analysis
#Subset Niger States from the Analysis
Abuja_lga <- lga %>%
filter(lga_name == "Municipal Area Council")
#We will focus on Niger States for the health care analysis
#Subset Niger States from the Analysis
Abuja_lga <- lga %>%
filter(lga_name_x == "Municipal Area Council")
#We will focus on Abuja Local Government Area (Municipal Area Council) for the health care analysis
#Subset Niger States from the Analysis
Abuja_lga <- lga %>%
filter(lga_name_x == "Municipal Area Council")
health_facilities_Abuja <- health_facilities %>%
filter(lga_name=='Municipal Area Council')
# EXERCISE: How many health facilities in Abuja?
tally(health_facilities_Abuja)
health_facilities_Abuja %>%
group_by(type) %>%
summarise(count= n()) %>%
ggplot(aes(x = type, y = count)) +
geom_bar(stat = "identity") +
geom_text(aes(label = count), vjust = -0.5, size = 4) +
xlab("Type of Health Facility") +
ylab("Number") +
ggtitle("Number of Health Facilities in Abuja")+
scale_fill_brewer(type = "qual", palette = "Greens")
#Plot health facilities
tm_shape(health_facilities_Abuja)+
tm_dots(col='type', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(Niger_States)+
tm_borders(lwd=1)
#Plot health facilities
tm_shape(health_facilities_Abuja)+
tm_dots(col='type', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(Abuja_lga)+
tm_borders(lwd=1)
#Plot health facilities
tm_shape(health_facilities_Abuja)+
tm_dots(col='type', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)
table(health_facilities_Abuja$type)
pop <- raster(paste0(input_path, "NGA_population_v1_2_gridded.tif"))
pop_Abuja <- crop(pop, Abuja_lga)
plot(pop_Abuja)
tm_shape(health_facilities_Abuja)+
tm_dots(col='type', size=0.07, id='primary_na', popup.vars=c('category','functional','source'))+
tm_basemap('OpenStreetMap')+
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)
health_facilities_Abuja_buffered <- st_buffer(health_facilities_Abuja, dist=set_units(1, km))
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(health_facilities_Abuja_buffered)+
tm_borders()+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary_na')+
tm_basemap('OpenStreetMap')
health_facilities_Abuja_buffered <- st_buffer(health_facilities_Abuja, dist=set_units(1, km))
# merge overlapping buffers
health_facilities_Abuja_buffered <- st_union(health_facilities_Abuja_buffered)
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(health_facilities_Abuja_buffered)+
tm_borders()+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary_na')+
tm_basemap('OpenStreetMap')
health_facilities_Abuja_pop <- raster::extract(pop_Abuja, health_facilities_Abuja_buffered, fun=sum, na.rm=T,df=T)
health_facilities_Abuja_buffered <- st_buffer(health_facilities_Abuja, dist=set_units(1, km))
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(health_facilities_Abuja_buffered)+
tm_borders()+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary_na')+
tm_basemap('OpenStreetMap')
health_facilities_Abuja_pop <- raster::extract(pop_Abuja, health_facilities_Abuja_buffered, fun=sum, na.rm=T,df=T)
#Rename extracted population
health_facilities_Abuja_pop <- health_facilities_Abuja_pop %>%
rename(pop = NGA_population_v1_2_gridded)
#cbind extracted population to health facilities
health_facilities_Abuja_buffered <- health_facilities_Abuja_buffered %>%
bind_cols(health_facilities_Abuja_pop)
#EXERCISE: How many people are living in 1km radius of a Health Center?
sum(health_facilities_Abuja_buffered$pop)
#Some summary statistics
summary(health_facilities_Abuja_buffered$pop)
hist(health_facilities_Abuja_buffered$pop, breaks=20)
#Plotting the population size and health facilities
tm_shape(health_facilities_Abuja_buffered)+
tm_fill('pop', style='pretty', id='primary.na')+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary.na')+
tm_basemap('OpenStreetMap')
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(health_facilities_Abuja_buffered)+
tm_borders()+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary_na')+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)+
tm_basemap('OpenStreetMap')
#Plotting the population size and health facilities
tm_shape(health_facilities_Abuja_buffered)+
tm_fill('pop', style='pretty', id='primary.na')+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary.na')+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)+
tm_basemap('OpenStreetMap')
#We want see the health facilities where their catchment area has a population of less than 1000 people
tm_shape(health_facilities_Niger_buffered %>%
filter(pop<1000))+
tm_fill( id='pop', alpha=0.5, col='grey20')+
tm_shape(pop_Niger)+
tm_raster()+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)+
tm_basemap('OpenStreetMap')
#We want see the health facilities where their catchment area has a population of less than 1000 people
tm_shape(health_facilities_Abuja_buffered %>%
filter(pop<1000))+
tm_fill( id='pop', alpha=0.5, col='grey20')+
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)+
tm_basemap('OpenStreetMap')
Abuja_pop_df <- exact_extract(x = pop, y = Abuja_lga, fun = 'sum')
Abuja_pop_df <- raster::extract(pop, Abuja_lga, fun=sum, na.rm=T,df=T)
View(Abuja_pop_df)
names(Abuja_pop_df)
#Rename
Abuja_pop_df <- Abuja_pop_df %>%
rename(total_pop = NGA_population_v1_2_gridded)
sum(Abuja_pop_df$total_pop) - sum(health_facilities_Abuja_pop$pop)
health_facilities_Abuja_buffered <- st_buffer(health_facilities_Abuja, dist=set_units(1, km))
# merge overlapping buffers
health_facilities_Abuja_buffered <- st_union(health_facilities_Abuja_buffered)
tm_shape(pop_Abuja)+
tm_raster()+
tm_shape(health_facilities_Abuja_buffered)+
tm_borders()+
tm_shape(health_facilities_Abuja)+
tm_dots( size=0.08, id='primary_na')+
tm_shape(Abuja_lga)+
tm_borders(lwd=4)+
tm_basemap('OpenStreetMap')
health_facilities_Abuja_pop <- raster::extract(pop_Abuja, health_facilities_Abuja_buffered, fun=sum, na.rm=T,df=T)
# convert the merged buffers to a SpatialPolygonsDataFrame object
health_facilities_Abuja_buffered <- as(health_facilities_Abuja_buffered, "Spatial")
health_facilities_Abuja_pop <- raster::extract(pop_Abuja, health_facilities_Abuja_buffered, fun=sum, na.rm=T,df=T)
#Rename extracted population
health_facilities_Abuja_pop <- health_facilities_Abuja_pop %>%
rename(pop = NGA_population_v1_2_gridded)
#cbind extracted population to health facilities
health_facilities_Abuja_buffered <- health_facilities_Abuja_buffered %>%
bind_cols(health_facilities_Abuja_pop)
View(health_facilities_Abuja)
View(health_facilities_Abuja_buffered)
x <- c(1, 2, 3, 4, 5)
x
y <- c(2, 1, 2, 3, 1)
x + y
mean(x) # compute the mean of the vector x
sqrt(100)  # 'sqrt' is the name of the square root function, and 100 is the argument
sqrt()  # This results in an error (console message). 1 argument is required
test_object <- sqrt(144) # Store the return value of a function
test_object
# omitting the second argument uses the default
round(2.71828)
# multiple arguments are separated by comma
round(2.71828, 2)
round(2.71828, 4)
#We can get the first element of the object nation using an index []
nation[1]
nation <- c("DRC", "Egypt", "Ethiopia", "Nigeria", "SA")
popSize <- c(71, 87, 90, 183, 54)
#We can get the first element of the object nation using an index []
nation[1]
#multiple element
nation[1, 2, 3]
#multiple element
nation[1:3]
m <- matrix(1:10, nrow=5, ncol=2)
m
#We can subset matrix using an indexing of the rows and columns
m[4]
#We can subset matrix using an indexing of the rows and columns
m[4,]
m[, 2] #columns
#we can combine multiple vectors into a matrix
Africa <- cbind(popSize, nation)
dim(Africa)
Africa
AfricaTwo <- cbind.data.frame(nation, popSize, writers)
#Dataframes
df <- data.frame(Country = c("DRC", "Egypt", "Ethiopia", "Nigeria", "SA"),
Population = c(71, 87, 90, 183, 54),
Writers = c(22, 34, 16, 130, 145))
#Dataframes
df <- data.frame(Country = c("DRC", "Egypt", "Ethiopia", "Nigeria", "SA"),
Population = c(71, 87, 90, 183, 54),
Writers = c(22, 34, 16, 130, 145))
View(df)
df
#or you can use view() to see the dataframe we have created
View(df)
#We can use the operator "$" to select a variable, or an item within a dataframe
df$Country
out <- list(1,2,"three")
out[1]
out[[1]]
class(out[1])
class(out[[1]])
out[3]
#structure of the list
str(out)
#We can also name each element of the list
y <- list(person="Mike", gender="M", company="ProgramCreek")
y
nation <- c("DRC", "Egypt", "Ethiopia", "Nigeria", "SA")
nation <- c,"DRC", "Egypt", "Ethiopia", "Nigeria", "SA"
nation <- c(45, "Egypt", 56, "Nigeria", "SA")
df$Area <- df$Population+10
View(df)
df$Area <- df$Population+10
df
df$Pop_density <- df$Population/df$Area
View(df)
df$Pop_density >10
#Find out which countries have population density of less than 0.5 and more than 10 writters
df$Pop_density >0.5 & df$Writers>50
#Find out which countries have population density greater than 0.5 OR more than 10 writers
df$Pop_density >0.5 | df$Writers>50
install.packages('tidyverse')
library(tidyverse)
install.packages("tmap")
library(tmap)
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
install.packages("sf")
install.packages("sf")
library(sf)
install.packages("raster")
install.packages("raster")
library(raster)
setwd("C:/Users/oy1r22/Documents/WorldPop Project/Nigeria Workshop/Spatial Data")
fake_data <- read.csv(paste0(input_path, "fake_data.csv"))
setwd("C:/Users/oy1r22/Documents/WorldPop Project/Nigeria Workshop/Spatial Data")
fake_data <- read.csv(paste0(input_path, "fake_data.csv"))
#Specify Drive Path
drive_path <- "C:/Users/oy1r22/Documents/WorldPop Project/Nigeria Workshop/"
input_path <- paste0(drive_path, "Spatial Data/")
fake_data <- read.csv(paste0(input_path, "fake_data.csv"))
#View data
View(fake_data)
#structure of variables
str(fake_data)
#dimension
dim(fake_data)
#first 6 rows of data
head(fake_data)
#last 6 rows of data
tail(fake_data)
?head
